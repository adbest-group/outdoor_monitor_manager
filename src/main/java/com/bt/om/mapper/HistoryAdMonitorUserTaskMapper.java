package com.bt.om.mapper;

import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;

import com.bt.om.entity.AdMonitorUserTask;
import com.bt.om.entity.HistoryAdMonitorUserTask;
import com.bt.om.entity.vo.AbandonTaskVo;

public interface HistoryAdMonitorUserTaskMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ad_monitor_user_task
     *
     * @mbggenerated Wed Apr 25 14:15:20 CST 2018
     */
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ad_monitor_user_task
     *
     * @mbggenerated Wed Apr 25 14:15:20 CST 2018
     */
    int insert(AdMonitorUserTask record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ad_monitor_user_task
     *
     * @mbggenerated Wed Apr 25 14:15:20 CST 2018
     */
    int insertSelective(HistoryAdMonitorUserTask record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ad_monitor_user_task
     *
     * @mbggenerated Wed Apr 25 14:15:20 CST 2018
     */
    AdMonitorUserTask selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ad_monitor_user_task
     *
     * @mbggenerated Wed Apr 25 14:15:20 CST 2018
     */
    int updateByPrimaryKeySelective(AdMonitorUserTask record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ad_monitor_user_task
     *
     * @mbggenerated Wed Apr 25 14:15:20 CST 2018
     */
    int updateByPrimaryKey(AdMonitorUserTask record);
    
    List<Integer> selectRecycleTaskIds(Map<String, Object> searchMap);
    int recycleUserTask(AdMonitorUserTask task);
    int abandonUserTask(AbandonTaskVo vo);
    /**
     * 获取即将结束的任务(2小时之前)
     */
    List<AdMonitorUserTask> getTaskWillEnd(Integer duration);
    /**
     * 更新推送状态
     */
    int updateIsPush(@Param("ids") List<Integer> ids);
    
    int cleanTask(AdMonitorUserTask task);

	List<Integer> selectOverTimeTaskIds(Map<String, Object> searchMap);

	void recycleOverTimeUserTask(AdMonitorUserTask task);
	
	List<HistoryAdMonitorUserTask> selectByMonitorTaskId(@Param("monitorTaskId") Integer monitorTaskId);

	int insertBatch(@Param("tableName") String tableName,@Param("adMonitorUserTasks") List<HistoryAdMonitorUserTask> adMonitorUserTasks);

}